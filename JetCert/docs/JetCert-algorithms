Algorithm CI
        1.        when new changes are pushed to Git do
        2.                Git pull
        3.                Extracting modified versions from Git changes
        4.                for each modified version Vi calculate utility do
        5.                        U-Vi = w1 × is_version_safe
                                                   + w2 × percentage_of_remaining_execution
                                                   + w3 × percentage_of_selection_in_last_periods
        6.                end for
        7.                Put modified versions to priority queue based on utility
        8.        end event

Assumptions
        is_version_safe: 0 or 100
        percentage_of_remaining_execution: [0,100]
        percentage_of_selection_in_last_periods: [0,100]
        then utility: [0,100]


Algorithm CD
        1.        while True do
        2.                if priority_queue is not empty then
        3.                        version = top of priority_queue
        4.                        build version
        5.                        delivery version
        6.                        remove version from priority_queue
        7.                end if
        8.        end while


Algorithm MAPE
        1.        while True do
        2.                Get data from sensor
        3.                Validate sensor data
        4.                for each module Mi do
        5.                        Extracting valid versions of Mi
                                                   based on validate sensor data and MAPE-K Rules
        6.                        select the best valid version of Mi
        7.                        reconfigure Mi to the best valid version
        8.                        execute Mi until the next cycle
        9.                end for
        10.              wait T seconds
        11.      end while


